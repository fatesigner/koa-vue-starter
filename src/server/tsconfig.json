{
  // 在最顶层设置compileOnSave标记，可以让IDE在保存文件的时候根据tsconfig.json重新生成文件
  "compileOnSave": false,
  "compilerOptions": {
    // 允许编译javascript文件
    "allowJs": false,
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true,
    // 在 .js文件中报告错误。与 --allowJs配合使用。
    "checkJs": true,
    // 生成相应的 .d.ts文件
    "declaration": false,
    //"declarationDir": "types",
    //"outDir": "server",
    // 显示诊断信息
    "diagnostics": true,
    // 给源码里的装饰器声明加上设计类型元数据
    "emitDecoratorMetadata": true,
    // 启用实验性的ES装饰器。
    "experimentalDecorators": true,
    // 禁止对同一个文件的不一致的引用
    "forceConsistentCasingInFileNames": true,
    // 在.tsx文件里支持JSX
    "jsx": "preserve",
    // 使用的JSX工厂函数
    "jsxFactory": "h",
    // 编译过程中需要引入的库文件的列表
    "lib": [
      "es5",
      "es6",
      "es2015",
      "es2015.promise",
      "dom"
    ],
    // 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）
    "moduleResolution": "node",
    "noStrictGenericChecks": true,
    "noImplicitAny": false,
    // 给错误和消息设置样式，使用颜色和上下文。
    "pretty": true,
    "resolveJsonModule": true,
    // 忽略所有的声明文件（ *.d.ts）的类型检查
    "skipLibCheck": true,
    // 生成相应的 .map文件。
    "sourceMap": true,
    // 以严格模式解析
    "strict": false,
    "strictNullChecks": false,
    "esModuleInterop": true,
    "rootDir": "./src",
    // 组织代码方式（指定生成哪个模块系统代码） amd、commonjs、es2015、es6、esnext
    "module": "commonjs",
    // 编译目标平台 es(3、5、6)、esnext
    "target": "es2017",
    // 要包含的类型声明文件名列表
    "types": [
      "node"
    ],
    // 要包含的类型声明文件路径列表
    "typeRoots": [
      "src/typings",
      "node_modules/@types",
      "node_modules/vue/types"
    ],
    // 解析非相对模块名的基准目录
    "baseUrl": ".",
    // 指定特殊模块的路径
    "paths": {
    }
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.vue"
  ],
  "exclude": [
    "node_modules",
    "src/**/*.spec.ts",
    "src/**/__tests__/*.ts"
  ]
}
